use anyhow::{Result, bail};

use crate::modules::exploits::{
    self,
    payloadgens,
    generic,
    camera,
};

pub async fn run_exploit(module_name: &str, target: &str) -> Result<()> {
    match module_name {
        // ───────────── standard exploits ─────────────
        "sample_exploit" |
        "exploits/sample_exploit" => {
            exploits::sample_exploit::run(target).await?
        }

        // ───────── payload generators (nested) ───────
        "payloadgenbat" |
        "payloadgens/payloadgenbat" |
        "exploits/payloadgens/payloadgenbat" => {
            payloadgens::payloadgenbat::run(target).await?
        }

        // ──────────────── generic exploits ────────────────
        "generic/heartbleed" |
        "exploits/generic/heartbleed" => {
            generic::heartbleed::run(target, 443).await?
        }

                // ──────────────── camera exploits ────────────────
        "camera/uniview_nvr_pwd_disclosure" |
        "exploits/camera/uniview_nvr_pwd_disclosure" => {
            camera::uniview_nvr_pwd_disclosure::run(target).await?
        }


        _ => bail!("Exploit module '{}' not found.", module_name),
    }

    Ok(())
}
